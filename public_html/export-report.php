<?php
/**
 * Export Report Data as CSV
 */

require_once 'includes/auth.php';
require_once 'includes/db.php';

// Require login
requireLogin();

$user = getCurrentUser();
$db = getDB();

// Get parameters
$start_date = $_POST['start_date'] ?? date('Y-m-d', strtotime('-30 days'));
$end_date = $_POST['end_date'] ?? date('Y-m-d');
$format = $_POST['format'] ?? 'csv';

if ($format !== 'csv') {
    die('Invalid export format');
}

// Set headers for CSV download
header('Content-Type: text/csv');
header('Content-Disposition: attachment; filename="guild-report-' . $start_date . '-to-' . $end_date . '.csv"');
header('Pragma: no-cache');
header('Expires: 0');

// Create output stream
$output = fopen('php://output', 'w');

// Write BOM for Excel compatibility
fprintf($output, chr(0xEF).chr(0xBB).chr(0xBF));

// Section 1: Summary Statistics
fputcsv($output, ['Guild Resource Report']);
fputcsv($output, ['Date Range:', $start_date . ' to ' . $end_date]);
fputcsv($output, ['Generated:', date('Y-m-d H:i:s')]);
fputcsv($output, ['Generated By:', $user['username']]);
fputcsv($output, []);

// Get summary stats
$total_contributions = $db->prepare("
    SELECT COUNT(*) FROM contributions 
    WHERE DATE(date_collected) BETWEEN ? AND ?
");
$total_contributions->execute([$start_date, $end_date]);
$total_count = $total_contributions->fetchColumn();

$total_quantity = $db->prepare("
    SELECT COALESCE(SUM(quantity), 0) FROM contributions 
    WHERE DATE(date_collected) BETWEEN ? AND ?
");
$total_quantity->execute([$start_date, $end_date]);
$total_qty = $total_quantity->fetchColumn();

$active_contributors = $db->prepare("
    SELECT COUNT(DISTINCT user_id) FROM contributions 
    WHERE DATE(date_collected) BETWEEN ? AND ?
");
$active_contributors->execute([$start_date, $end_date]);
$active_count = $active_contributors->fetchColumn();

fputcsv($output, ['Summary Statistics']);
fputcsv($output, ['Metric', 'Value']);
fputcsv($output, ['Total Contributions', $total_count]);
fputcsv($output, ['Total Resources Collected', $total_qty]);
fputcsv($output, ['Active Contributors', $active_count]);
fputcsv($output, []);

// Section 2: Daily Resource Totals
fputcsv($output, ['Daily Resource Collection']);
fputcsv($output, ['Date', 'Resource', 'Category', 'Quantity']);

$daily_resources = $db->prepare("
    SELECT 
        DATE(c.date_collected) as date,
        r.name as resource_name,
        r.category,
        SUM(c.quantity) as daily_total
    FROM contributions c
    JOIN resources r ON c.resource_id = r.id
    WHERE DATE(c.date_collected) BETWEEN ? AND ?
    GROUP BY DATE(c.date_collected), r.id
    ORDER BY date, r.name
");
$daily_resources->execute([$start_date, $end_date]);

while ($row = $daily_resources->fetch()) {
    fputcsv($output, [
        $row['date'],
        $row['resource_name'],
        $row['category'],
        $row['daily_total']
    ]);
}
fputcsv($output, []);

// Section 3: Top Contributors
fputcsv($output, ['Top Contributors']);
fputcsv($output, ['Rank', 'Username', 'Total Contributed', 'Contribution Count', 'Average per Contribution', 'Active Days']);

$top_contributors = $db->prepare("
    SELECT 
        COALESCE(u.in_game_name, u.username) as username,
        COUNT(DISTINCT c.id) as contribution_count,
        COUNT(DISTINCT DATE(c.date_collected)) as active_days,
        SUM(c.quantity) as total_contributed,
        AVG(c.quantity) as avg_contribution
    FROM contributions c
    JOIN users u ON c.user_id = u.id
    WHERE DATE(c.date_collected) BETWEEN ? AND ?
    GROUP BY u.id
    ORDER BY total_contributed DESC
    LIMIT 20
");
$top_contributors->execute([$start_date, $end_date]);

$rank = 1;
while ($row = $top_contributors->fetch()) {
    fputcsv($output, [
        $rank++,
        $row['username'],
        $row['total_contributed'],
        $row['contribution_count'],
        round($row['avg_contribution'], 2),
        $row['active_days']
    ]);
}
fputcsv($output, []);

// Section 4: Farming Run Efficiency
fputcsv($output, ['Farming Run Analysis']);
fputcsv($output, ['Run Name', 'Type', 'Date', 'Duration (min)', 'Participants', 'Total Collected', 'Resources/Min', 'Resources/Person', 'Efficiency Score']);

$farming_runs = $db->prepare("
    SELECT 
        fr.name,
        fr.run_type,
        fr.started_at,
        TIMESTAMPDIFF(MINUTE, fr.started_at, fr.ended_at) as duration_minutes,
        COUNT(DISTINCT rp.user_id) as participant_count,
        COALESCE(SUM(rc.quantity), 0) as total_collected
    FROM farming_runs fr
    LEFT JOIN run_participants rp ON fr.id = rp.run_id
    LEFT JOIN run_collections rc ON fr.id = rc.run_id
    WHERE fr.status = 'completed'
    AND DATE(fr.started_at) BETWEEN ? AND ?
    GROUP BY fr.id
    HAVING duration_minutes > 0
    ORDER BY fr.started_at DESC
");
$farming_runs->execute([$start_date, $end_date]);

while ($row = $farming_runs->fetch()) {
    $resources_per_minute = $row['duration_minutes'] > 0 ? 
        round($row['total_collected'] / $row['duration_minutes'], 2) : 0;
    $resources_per_person = $row['participant_count'] > 0 ? 
        round($row['total_collected'] / $row['participant_count'], 2) : 0;
    $efficiency = $row['participant_count'] > 0 && $row['duration_minutes'] > 0 ? 
        round(($row['total_collected'] / ($row['participant_count'] * $row['duration_minutes'])) * 100, 2) : 0;
    
    fputcsv($output, [
        $row['name'],
        $row['run_type'],
        $row['started_at'],
        $row['duration_minutes'],
        $row['participant_count'],
        $row['total_collected'],
        $resources_per_minute,
        $resources_per_person,
        $efficiency
    ]);
}
fputcsv($output, []);

// Section 5: Resource Distribution by Category
fputcsv($output, ['Resource Distribution by Category']);
fputcsv($output, ['Category', 'Total Quantity', 'Percentage']);

$resource_distribution = $db->prepare("
    SELECT 
        r.category,
        SUM(c.quantity) as category_total
    FROM contributions c
    JOIN resources r ON c.resource_id = r.id
    WHERE DATE(c.date_collected) BETWEEN ? AND ?
    GROUP BY r.category
    ORDER BY category_total DESC
");
$resource_distribution->execute([$start_date, $end_date]);

$distribution = $resource_distribution->fetchAll();
$grand_total = array_sum(array_column($distribution, 'category_total'));

foreach ($distribution as $row) {
    $percentage = $grand_total > 0 ? round(($row['category_total'] / $grand_total) * 100, 2) : 0;
    fputcsv($output, [
        $row['category'],
        $row['category_total'],
        $percentage . '%'
    ]);
}
fputcsv($output, []);

// Section 6: All Contributions (detailed)
if (isAdmin()) {
    fputcsv($output, ['Detailed Contribution Log']);
    fputcsv($output, ['Date', 'Time', 'User', 'Resource', 'Category', 'Quantity', 'Tax Amount', 'Notes']);
    
    $all_contributions = $db->prepare("
        SELECT 
            c.date_collected,
            COALESCE(u.in_game_name, u.username) as username,
            r.name as resource_name,
            r.category,
            c.quantity,
            c.tax_amount,
            c.notes
        FROM contributions c
        JOIN users u ON c.user_id = u.id
        JOIN resources r ON c.resource_id = r.id
        WHERE DATE(c.date_collected) BETWEEN ? AND ?
        ORDER BY c.date_collected DESC
    ");
    $all_contributions->execute([$start_date, $end_date]);
    
    while ($row = $all_contributions->fetch()) {
        fputcsv($output, [
            date('Y-m-d', strtotime($row['date_collected'])),
            date('H:i:s', strtotime($row['date_collected'])),
            $row['username'],
            $row['resource_name'],
            $row['category'],
            $row['quantity'],
            $row['tax_amount'] ?: '0',
            $row['notes'] ?: ''
        ]);
    }
}

// Close the output stream
fclose($output);
exit;